VECTORES-----------------------------------------------------

    IMPRIMIR
    void mostrarVector(const int v[], int n){
	    cout << "\n· ";
	    for(int i=0; i<n; i++){
		    cout << v[i] << " · ";
	    }
	    cout << endl;
    }

    RESERVAR MEMORIA DINÁMICA
    int * sucesion = new int[n];

    AMPLIAR MEMORIA DINÁMICA
    void ampliar(int* & v, int previo, int nuevo){
	    if(previo < nuevo){
		    int *v_ampliado = new int[nuevo];

		    for(int i=0; i<previo; i++){
			    v_ampliado[i] = v[i];
		    }

		    delete []v;
		    v = v_ampliado;
	    }
    }
    
    LIBERAR MEMORIA DINÁMICA

MATRICES---------------------------------------------------

    IMPRIMIR
    void imprime(char **M, int nf, int nc){
	    for(int i=0; i<nf; i++){
		    for(int j=0; j<nc; j++){
			    cout << " " << M[i][j] << " ";
		    }
		    cout << endl;
	    }
	    cout << endl;
    }

    RELLENAR
    void rellenar(char **M, int nf, int nc, char simbolo){
	    for(int i=0; i<nf; i++){
		    for(int j=0; j<nc; j++){
			    M[i][j] = simbolo;
		    }
	    }
    }
   
    RESERVAR MEMORIA DINÁMICA
    void reservaMemoria(char** & M, int nf, int nc){
	    M = new char*[nf];

	    for (int i=0; i<nf; ++i)
		    M[i] = new char[nc];
    }

    LIBERAR MEMORIA DINÁMICA

    void liberaMemoria(char** & M, int nf, int nc){
	    for(int i=0; i<nf; ++i)
		    delete[] M[i];

	    delete[] M;
    }



